/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.group4.risc.server;
//import edu.duke.ece651.group4.risc.server.AbstractMapFactory;
import edu.duke.ece651.group4.risc.shared.*;

import java.net.*;
import java.io.*;
import java.util.ArrayList;

public class Server extends Thread{
  private ServerSocket serverSocket;
  private AbstractMapFactory<Character> mapFactory;
  private Map<Character> map;
  private int player_num;
  private ArrayList<Socket> player_skd;
  private ArrayList<ObjectOutputStream> player_out;
  private ArrayList<ObjectInputStream> player_in;

  public Server(int port) throws IOException {
      serverSocket = new ServerSocket(port);
      mapFactory = new V1MapFactory();
      map = mapFactory.generateMap();
      player_num = 2;
      player_skd = new ArrayList<Socket>();
      player_out = new ArrayList<ObjectOutputStream>();
      player_in = new ArrayList<ObjectInputStream>();
  }
  
  public ServerSocket getServerSocket() {
    return serverSocket;
  }
  public void accept_connection() throws IOException {
    System.out.println("Waiting for client on port " + serverSocket.getLocalPort() + "...");
    // connect to player
    Socket server = serverSocket.accept();
    // get input and output
       ObjectOutputStream os = new ObjectOutputStream(server.getOutputStream());
    ObjectInputStream is = new ObjectInputStream(new BufferedInputStream(server.getInputStream()));
    // add socket, output, input to Arraylist
    player_skd.add(server);
    player_out.add(os);
    player_in.add(is);
    System.out.println("Just connected to " + server.getRemoteSocketAddress());
  }

  public void send_original_map(int player_id) throws IOException{
    player_out.get(player_id).writeObject(map);
    player_out.get(player_id).flush();
    Integer id = player_id;
    player_out.get(player_id).writeObject(id);
    player_out.get(player_id).flush();
  }
 
  public void close_all_connection(){
    try {
      for (int i = 0; i < player_num; i++) {
        player_skd.get(i).close();
        player_out.get(i).close();
        player_in.get(i).close();
      }
    } catch(IOException e) {
        e.printStackTrace();
    }
  }

  public void initializeGame() {
    for (int i = 0; i < player_num; i++) {
      try {
        // accept connection
        accept_connection();
        // send the map and player_id to client
        send_original_map(i);
      } catch(IOException e) {
        e.printStackTrace();
        break;
      }
    }
  }
  
  public void send_to_client(Object obj, int id) {
    try {
      player_out.get(id).writeObject(obj);
      player_out.get(id).flush();
    } catch(IOException e) {
      e.printStackTrace();
    }
  }
  public Object recv_from_client(int id) {
    Object obj = null;
    try{
      obj = player_in.get(id).readObject();
    } catch (IOException e) {
      e.printStackTrace();
    } catch (ClassNotFoundException e) {
      e.printStackTrace();
    }
    return obj;
  }
  public void playOneRound() {
    for (int i = 0; i < player_num; i++) {
      // accept the order and execute
      ArrayList<ActionParser> order_list = (ArrayList<ActionParser>) recv_from_client(i);
      for (int j = 0; j < order_list.size(); j++) {
        Action<Character> move = new MoveAction<>(order_list.get(j), map, map.getPlayer(j));
        move.doAction();
      }
    }

    for (int i = 0; i < player_num; i++) {
      send_to_client(map, i);
    }
  }
  
  
  public void run() {
    // initialize game: receive connection and send the map
    initializeGame();

    // play one round
    playOneRound();

    // close all connection 
    close_all_connection();
  }
  


  public static void main(String [] args)
    {
      //  int port = Integer.parseInt(args[0]);
        try {
          int port_num = 6066;
          Thread t = new Server(port_num);
          t.start();
        } catch(IOException e) {
          e.printStackTrace();
        }
    }
}
